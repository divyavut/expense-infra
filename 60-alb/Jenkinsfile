pipeline {
    agent {
        label 'AGENT-1'
    }
    options { 
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    // retry(3)
     }
     parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')

    }
    stages {  
        stage('init and plan') { 
            steps {   
               withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """   
                        cd 60-alb
                        terraform init -reconfigure
                        terraform plan -out=tfplan

                    """  
               }
            }
        }
        stage('apply or destroy') { 
             input {
                message "Should we continue to ${params.ACTION}"
                ok "Yes, we should."
            }
            steps {  
               withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """   
                        cd 60-alb
                        if [ ${params.ACTION} == 'apply' ] 
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                            terraform destroy -auto-approve
                        fi   
                    """  
               }
           }   
        } 
         // down stream job 
        stage ('Destroy bastion') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps { 
            build job: '20-bastion', 
            parameters: [string(name: 'ACTION', value: "destroy")],
            wait: false
            }
        }      
    post {
        always{
            echo "This section always runs"
            deleteDir()
        }
        success{
            echo "This section runs when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
    }
}